/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EventMarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "createEventItem(address,uint256,uint256,uint256,string,string)": FunctionFragment;
    "createEventSale(address,uint256,uint256)": FunctionFragment;
    "fetchEventItems()": FunctionFragment;
    "fetchItemsCreated()": FunctionFragment;
    "fetchMyNFTs()": FunctionFragment;
    "getListingPrice()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createEventItem",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createEventSale",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchEventItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchItemsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListingPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createEventItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEventSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchEventItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchItemsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingPrice",
    data: BytesLike
  ): Result;

  events: {
    "EventItemCreated(uint256,address,uint256,address,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventItemCreated"): EventFragment;
}

export type EventItemCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber, boolean] & {
    itemId: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    sold: boolean;
  }
>;

export class EventMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EventMarketplaceInterface;

  functions: {
    createEventItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      ticketCount: BigNumberish,
      eventName: string,
      promoterBrandSymbol: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createEventSale(
      nftContract: string,
      itemId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchEventItems(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
          sold: boolean;
          eventName: string;
          promoterBrandSymbol: string;
          ticketCount: BigNumber;
          ticketSold: BigNumber;
          ticketRemaining: BigNumber;
        })[]
      ]
    >;

    fetchItemsCreated(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
          sold: boolean;
          eventName: string;
          promoterBrandSymbol: string;
          ticketCount: BigNumber;
          ticketSold: BigNumber;
          ticketRemaining: BigNumber;
        })[]
      ]
    >;

    fetchMyNFTs(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          itemId: BigNumber;
          nftContract: string;
          tokenId: BigNumber;
          seller: string;
          owner: string;
          price: BigNumber;
          sold: boolean;
          eventName: string;
          promoterBrandSymbol: string;
          ticketCount: BigNumber;
          ticketSold: BigNumber;
          ticketRemaining: BigNumber;
        })[]
      ]
    >;

    getListingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createEventItem(
    nftContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    ticketCount: BigNumberish,
    eventName: string,
    promoterBrandSymbol: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createEventSale(
    nftContract: string,
    itemId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchEventItems(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
      sold: boolean;
      eventName: string;
      promoterBrandSymbol: string;
      ticketCount: BigNumber;
      ticketSold: BigNumber;
      ticketRemaining: BigNumber;
    })[]
  >;

  fetchItemsCreated(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
      sold: boolean;
      eventName: string;
      promoterBrandSymbol: string;
      ticketCount: BigNumber;
      ticketSold: BigNumber;
      ticketRemaining: BigNumber;
    })[]
  >;

  fetchMyNFTs(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      itemId: BigNumber;
      nftContract: string;
      tokenId: BigNumber;
      seller: string;
      owner: string;
      price: BigNumber;
      sold: boolean;
      eventName: string;
      promoterBrandSymbol: string;
      ticketCount: BigNumber;
      ticketSold: BigNumber;
      ticketRemaining: BigNumber;
    })[]
  >;

  getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createEventItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      ticketCount: BigNumberish,
      eventName: string,
      promoterBrandSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createEventSale(
      nftContract: string,
      itemId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchEventItems(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
        sold: boolean;
        eventName: string;
        promoterBrandSymbol: string;
        ticketCount: BigNumber;
        ticketSold: BigNumber;
        ticketRemaining: BigNumber;
      })[]
    >;

    fetchItemsCreated(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
        sold: boolean;
        eventName: string;
        promoterBrandSymbol: string;
        ticketCount: BigNumber;
        ticketSold: BigNumber;
        ticketRemaining: BigNumber;
      })[]
    >;

    fetchMyNFTs(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
        sold: boolean;
        eventName: string;
        promoterBrandSymbol: string;
        ticketCount: BigNumber;
        ticketSold: BigNumber;
        ticketRemaining: BigNumber;
      })[]
    >;

    getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "EventItemCreated(uint256,address,uint256,address,address,uint256,bool)"(
      itemId?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, string, BigNumber, boolean],
      {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
        sold: boolean;
      }
    >;

    EventItemCreated(
      itemId?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, string, BigNumber, boolean],
      {
        itemId: BigNumber;
        nftContract: string;
        tokenId: BigNumber;
        seller: string;
        owner: string;
        price: BigNumber;
        sold: boolean;
      }
    >;
  };

  estimateGas: {
    createEventItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      ticketCount: BigNumberish,
      eventName: string,
      promoterBrandSymbol: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createEventSale(
      nftContract: string,
      itemId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchEventItems(overrides?: CallOverrides): Promise<BigNumber>;

    fetchItemsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMyNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createEventItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      ticketCount: BigNumberish,
      eventName: string,
      promoterBrandSymbol: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createEventSale(
      nftContract: string,
      itemId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchEventItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchItemsCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchMyNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
